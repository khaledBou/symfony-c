security:
    encoders:
        App\Entity\User\Coach:
            algorithm: sha1
            iterations: 1
            encode_as_base64: false

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User\Coach
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        sso:
            pattern: ^/sso/login
            guard:
                authenticators:
                    - App\Security\TokenAuthenticator
            context: share_auth_between_firewalls
        main:
            anonymous: ~
            form_login:
                login_path: login
            logout:
                path: logout
                success_handler: App\Security\LogoutHandler
            guard:
                authenticators:
                    - App\Security\FormAuthenticator
                    - App\Security\KeycloakAuthenticator
                entry_point: App\Security\FormAuthenticator
            context: share_auth_between_firewalls
        keycloak:
            anonymous: ~
            form_login:
                login_path: connect_keycloak_start
            logout:
                path: logout
                success_handler: App\Security\LogoutHandler
            guard:
                authenticators:
                    - App\Security\KeycloakAuthenticator
                    - App\Security\FormAuthenticator
                entry_point: App\Security\KeycloakAuthenticator
            context: share_auth_between_firewalls

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/sso/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/connect/keycloak, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: ROLE_USER }
